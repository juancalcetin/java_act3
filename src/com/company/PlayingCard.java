package com.company;


public class PlayingCard {

    public enum Suit {
        Corazones, Diamantes, Treboles, Picas
    };

    public enum Rank {
        A, Dos, Tres, Cuatro, Cinco, Seis, Siete, Ocho, Nueve, Diez, J, Q, K
    };

    private Suit suit;

    private Rank rank;

    /**
     * Constructs an instance of PlayingCard
     *
     * @param rank
     *            Any of the Rank enum values defined in this same class
     * @param suit
     *            Any of the Suit enum values defined in this same class
     * @throws IllegalArgumentException
     *             if either the rank or suit are null
     */
    public PlayingCard(Rank rank, Suit suit) {
        if (rank == null) {
            throw new IllegalArgumentException("Card rank is empty!");
        }
        if (suit == null) {
            throw new IllegalArgumentException("Card suit is empty!");
        }

        this.rank = rank;
        this.suit = suit;
    }

    /**
     * Returns the Rank enum used to initialize the object
     *
     * @return rank
     */
    public Rank getRank() {
        return rank;
    }

    /**
     * Returns the Suit enum used to initialize the object
     *
     * @return suit
     */
    public Suit getSuit() {
        return suit;
    }

    /**
     * Overrides the Object.toString() method to return a useful String of the
     * Rank and Suit
     *
     * @return String Pretty-printed string of the Rank and Suit; e.g.,
     *         "Ace of Spades"
     */
    @Override
    public String toString() {
        return new StringBuilder().append(rank).append(" de ").append(suit).toString();
    }

    /**
     * Overrides the Object.hashCode() method to allow the Set interface to
     * enforce only one PlayingCard Rank, Suit combination; GENERATED BY ECLIPSE
     *
     * @return hashcode for each PlayingCard combination
     */
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((rank == null) ? 0 : rank.hashCode());
        result = prime * result + ((suit == null) ? 0 : suit.hashCode());
        return result;
    }

    /**
     * Overrides the Object.equals() method to usefully compare two PlayingCard
     * instances based on their Rank, Suit combination; GENERATED BY ECLIPSE
     *
     * @return boolean determining whether the Rank, Suit combination of two
     *         PlayingCard instances are the same
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        PlayingCard other = (PlayingCard) obj;
        if (rank != other.rank)
            return false;
        if (suit != other.suit)
            return false;
        return true;
    }
}